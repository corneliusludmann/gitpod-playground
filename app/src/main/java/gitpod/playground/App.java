/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package gitpod.playground;

import java.net.URI;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

import javax.websocket.ClientEndpointConfig;
import javax.websocket.ContainerProvider;
import javax.websocket.Session;
import javax.websocket.WebSocketContainer;

import org.eclipse.lsp4j.jsonrpc.Launcher;
import org.eclipse.lsp4j.websocket.WebSocketEndpoint;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) throws Exception {
        System.out.println(new App().getGreeting());

        String uri = "wss://gitpod.io/api/v1";
        String token = "49d0bb5a6e456becd3cc452f31be58f13da0d19263c536a816d1e437bf97";
        String origin = "gitpod.io";

        ClientImpl client = new ClientImpl();
        WebSocketEndpoint<RemoteServer> webSocketEndpoint = new WebSocketEndpoint<RemoteServer>() {

            @Override
            protected void configure(Launcher.Builder<RemoteServer> builder) {
                builder.setLocalService(client).setRemoteInterface(RemoteServer.class);
            }

            @Override
            protected void connect(Collection<Object> localServices, RemoteServer remoteProxy) {
                localServices.forEach(s -> ((Client) s).connect(remoteProxy));
            }
        };

        ClientEndpointConfig.Configurator configurator = new ClientEndpointConfig.Configurator() {
            @Override
            public void beforeRequest(Map<String, List<String>> headers) {
                headers.put("Origin", Arrays.asList(origin));
                headers.put("Authorization", Arrays.asList("Bearer " + token));
            }
        };
        ClientEndpointConfig clientEndpointConfig = ClientEndpointConfig.Builder.create().configurator(configurator)
                .build();
        WebSocketContainer webSocketContainer = ContainerProvider.getWebSocketContainer();
        Session session = webSocketContainer.connectToServer(webSocketEndpoint, clientEndpointConfig, URI.create(uri));
        CompletableFuture<User> resp = client.server.getLoggedInUser();
        User u = resp.join();
        System.out.println("User: " + u);

        // WebSocket.Listener webSocketListener = new WebSocket.Listener(){
        // };
        //
        // CompletableFuture<WebSocket> wscf =
        // HttpClient.newHttpClient().newWebSocketBuilder().buildAsync(URI.create("wss://gitpod.io/api/v1"),
        // webSocketListener);
        // WebSocket ws = wscf.join();
    }
}

class User {
    String id;
    String name;

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Override
    public String toString() {
        return "User [id=" + id + ", name=" + name + "]";
    }
}

interface RemoteServer {
    CompletableFuture<User> getLoggedInUser();
}

interface Client {
    void connect(RemoteServer server);
}

class ClientImpl implements Client {

    public RemoteServer server;

    @Override
    public void connect(RemoteServer server) {
        this.server = server;
    }

}